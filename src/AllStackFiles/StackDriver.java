/**   A driver that demonstrates the using an implementation of a Stack.   @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0
   UPDATED by C. Lee-Klawender*/package AllStackFiles;public class StackDriver{	public static void main(String[] args)	{
		System.out.println("Create a stack: ");		StackInterface<String> myStack = new ArrayStack<>(); // FILL IN FOR EX. 2.1
		
		System.out.println("Results of testing the FIRST stack:\n");		testStackOperations(myStack);
		
		// Code will be added for Ex. 2.2 here		StackInterface<String> myStack2 = new LinkedStack<>();		
		System.out.println("Results of testing the SECOND stack:\n");		testStackOperations(myStack2);				System.out.println("\n\nDone.");	}  // end main	public static void testStackOperations(StackInterface<String> myStack)	{		System.out.println("isEmpty() returns " + myStack.isEmpty());		System.out.println("\nAdd to stack to get\n" +		                   "Joe Jane Jill Jess Jim");
        String [] strArray = {"Jim", "Jess", "Jill", "Jane", "Joe", "Jack"};		for(  int i=0; i < strArray.length ; ++i )
		{
            if( myStack.push( strArray[i] ) )
                System.out.println("Pushed " + strArray[i] + " successfully");
            else
                System.out.println("UNABLE TO PUSH " + strArray[i] );
        }		System.out.println("\nisEmpty() returns " + myStack.isEmpty());

		// FOR LAB EXERCISE 2.1, ADD CODE HERE TO GET THE SIZE FROM THE Stack AND DISPLAY IT		System.out.println("\nThe size from the stack is: " + myStack.size());				System.out.println("\nTesting peek and pop:");		while (!myStack.isEmpty())		{			String top = myStack.peek();			System.out.println("\n" + top + " is at the top of the stack.");			top = myStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.print("\nThe stack should be empty: ");		System.out.println("isEmpty() returns " + myStack.isEmpty());		System.out.println("\n myStack.peek() returns ");        System.out.println(myStack.peek());		System.out.println("\n myStack.pop()  returns ");        System.out.println(myStack.pop());

        System.out.println("\nEnd of Stack Test\n");	} // end testStackOperations}  // end Driver	/**Create a stack: Results of testing the FIRST stack:isEmpty() returns trueAdd to stack to getJoe Jane Jill Jess JimPushed Jim successfullyPushed Jess successfullyPushed Jill successfullyPushed Jane successfullyPushed Joe successfullyUNABLE TO PUSH JackisEmpty() returns falseThe size from the stack is: 5Testing peek and pop:Joe is at the top of the stack.Joe is removed from the stack.Jane is at the top of the stack.Jane is removed from the stack.Jill is at the top of the stack.Jill is removed from the stack.Jess is at the top of the stack.Jess is removed from the stack.Jim is at the top of the stack.Jim is removed from the stack.The stack should be empty: isEmpty() returns true myStack.peek() returns null myStack.pop()  returns nullEnd of Stack TestResults of testing the SECOND stack:isEmpty() returns trueAdd to stack to getJoe Jane Jill Jess JimPushed Jim successfullyPushed Jess successfullyPushed Jill successfullyPushed Jane successfullyPushed Joe successfullyPushed Jack successfullyisEmpty() returns falseThe size from the stack is: 6Testing peek and pop:Jack is at the top of the stack.Jack is removed from the stack.Joe is at the top of the stack.Joe is removed from the stack.Jane is at the top of the stack.Jane is removed from the stack.Jill is at the top of the stack.Jill is removed from the stack.Jess is at the top of the stack.Jess is removed from the stack.Jim is at the top of the stack.Jim is removed from the stack.The stack should be empty: isEmpty() returns true myStack.peek() returns null myStack.pop()  returns nullEnd of Stack TestDone.Answer for Question:In LinkedStack, it won't display "UNABLE TO PUSH..." message which is different from ArrayStack.We can successfully push 6 elements to LinkedStack. In my opinion, the main reason is that we don't need to declare a final instance variable in LinkedStack. We can store many elements in LinkedStack. */	